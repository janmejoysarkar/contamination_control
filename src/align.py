#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Tue Oct 21 03:31:21 PM CEST 2025
@author: sarkarjj
@hostname: hydra2

DESCRIPTION
- This module generates the flat field for removing contaminant patches.
- Images are aligned and median stack is taken based on reference frame.
- Flat is generated by dividing sun image by median stacked image.
- This is tested for sun-at-center images.
- Align images by cross-correlation for feature rich bands.
- Align images by sun-cent information for continua.
"""


from sunkit_image.coalignment import calculate_match_template_shift, apply_shifts
from astropy.coordinates import SkyCoord, SkyOffsetFrame
import astropy.units as u
import numpy as np
import os
import glob
import sunpy
import matplotlib.pyplot as plt
from astropy.io import fits

def get_submap(ref_img):
	"""
	Get a submap from the reference image for template matching.
	Parameters:
	- ref_img: Reference SunPy map image.
	Returns:
	- Submap of the reference image.
	"""
	center_coord = SkyCoord(0 * u.arcsec, 950* u.arcsec, frame=ref_img.coordinate_frame) #54,157
	width = 1100 * u.arcsec
	height =300 * u.arcsec   
	offset_frame = SkyOffsetFrame(origin=center_coord, rotation=0*u.deg)
	rectangle = SkyCoord(lon=[-1/2, 1/2] * width, lat=[-1/2, 1/2] * height, frame=offset_frame)
	ref_submap = ref_img.submap(rectangle) #bottom_left, top_right=top_right)
	return ref_submap

if __name__=='__main__':
    SAVE= True
    project_path= os.path.abspath('..')
    files= sorted(glob.glob(f'/home/sarkarjj/data/raw/*')) # Filepath for full disk images
    ref_img= sunpy.map.Map(files[0]) #First frame is taken as reference
    ref_submap = get_submap(ref_img)
    ref_head=ref_submap.fits_header
    ref_cdel=ref_head['CDELT1']
    FILT_NAME= ref_head['FTR_NAME']
    flat_filename= os.path.join(project_path, f'data/processed/flat_{ref_head['F_NAME']}')
    seq = sunpy.map.Map(files, sequence=True)
    o_x, o_y, x_arry, y_arry, aln_imgs = [], [], [], [], []
    
    for l in range(len(seq) - 1):
        o_x.append(seq[l + 1].meta.get('CRPIX1'))
        o_y.append(seq[l + 1].meta.get('CRPIX2'))
        if FILT_NAME not in ['NB03', 'NB04', 'NB08']:
           x_arry.append(seq[0].meta.get('CRPIX1')-seq[l+1].meta.get('CRPIX1'))
           y_arry.append(seq[0].meta.get('CRPIX2')-seq[l+1].meta.get('CRPIX2'))
    
    if FILT_NAME in ['NB03', 'NB04', 'NB08']:
    	align_shift = calculate_match_template_shift(seq, template=ref_submap)
    	x_arry.extend(align_shift['x'].value[1:] / ref_cdel * -1)  # avoiding the inserted image data
    	y_arry.extend(align_shift['y'].value[1:] / ref_cdel * -1)
    	shift_xPix = align_shift['x'].value / ref_cdel * -1
    	shift_yPix = align_shift['y'].value / ref_cdel * -1
    else:
    	x_arry=np.array(x_arry)
    	y_arry=np.array(y_arry)
    	shift_xPix = np.insert(x_arry,0,0)
    	shift_yPix = np.insert(y_arry,0,0)
    
    aligned_maps = apply_shifts(seq, yshift=shift_yPix * u.pixel, xshift=shift_xPix * u.pixel, clip=False)
    aligned_map_arr= np.stack([m.data for m in aligned_maps], axis=0)
    med= np.median(aligned_map_arr, axis=0)
    flat= ref_img.data/med
    if SAVE: fits.writeto(flat_filename, flat,  overwrite=True)
